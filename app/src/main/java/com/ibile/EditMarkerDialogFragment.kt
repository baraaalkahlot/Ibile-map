package com.ibileimport android.Manifest.permission.READ_CONTACTSimport android.app.Activityimport android.app.AlertDialogimport android.content.DialogInterfaceimport android.content.Intentimport android.content.pm.PackageManager.PERMISSION_GRANTEDimport android.os.Bundleimport android.provider.ContactsContractimport android.telephony.PhoneNumberUtilsimport android.text.Editableimport android.view.Viewimport androidx.appcompat.widget.AppCompatTextViewimport androidx.core.view.setPaddingimport androidx.navigation.fragment.findNavControllerimport com.airbnb.epoxy.EpoxyRecyclerViewimport com.airbnb.mvrx.activityViewModelimport com.ibile.core.*import com.ibile.core.Extensions.dpimport com.ibile.data.database.entities.Markerimport com.ibile.databinding.DialogViewEditMarkerPhoneNumberBindingimport com.ibile.utils.EditTextChangeCallbackimport com.ibile.utils.extensions.runWithPermissionsimport com.ibile.utils.extensions.startResolvableActivityForResultimport com.maltaisn.icondialog.IconDialogimport com.maltaisn.icondialog.IconDialogSettingsimport com.maltaisn.icondialog.data.Iconimport com.maltaisn.icondialog.pack.IconPackimport org.koin.android.ext.android.injectimport petrov.kristiyan.colorpicker.ColorPickerclass EditMarkerDialogFragment : BaseDialogFragment(), IconDialog.Callback {    private val markersViewModel: MarkersViewModel by activityViewModel()    private val iconPack: IconPack by inject()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setStyle(STYLE_NO_TITLE, android.R.style.Theme_Translucent_NoTitleBar)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        view.findViewById<EpoxyRecyclerView>(R.id.recyclerview).setPadding(4f.dp.toInt())    }    override fun epoxyController(): MvRxEpoxyController =        simpleController(markersViewModel) { markersViewModelState ->            val marker = markersViewModelState.markerForEdit            if (marker == null) {                findNavController().popBackStack()                return@simpleController            }            // TODO: this should be sticky but there is currently no support for sticky headers in epoxy            editMarkerDetailsHeader {                id("EditMarkerDetailsHeader")                onClickSaveMarker { _ -> markersViewModel.updateStagedMarker() }                onClickBackBtn { _ -> markersViewModel.setMarkerForEdit(null) }                saveBtnIsEnabled(markersViewModel.getMarkerById(marker.id) != marker)            }            editMarkerDetailsBody {                id("EditMarkerDetailsBody")                marker(marker)                titleTextChangeCallback(object :                    EditTextChangeCallback {                    override fun onEditTextChanged(text: Editable) {                        markersViewModel.editMarker { copy(name = text.toString()) }                    }                })                descriptionTextChangeCallback(object :                    EditTextChangeCallback {                    override fun onEditTextChanged(text: Editable) {                        markersViewModel.editMarker { copy(description = text.toString()) }                    }                })                onClickChangeIcon { _ ->                    iconDialog.show(childFragmentManager, IconDialog::class.simpleName)                }                onClickChangeColor { _ -> colorPicker.show() }                onClickChooseContact { _ -> handleChooseContact() }                onClickEditPhoneNumber { _ -> showEditPhoneNumberDialog() }                onClickCallPhoneNumber { _ -> showPhoneNumberActionsDialog() }            }        }    private fun handleChooseContact() {        runWithPermissions(::chooseContact, READ_CONTACTS, RC_READ_CONTACT_PERMISSION)    }    private fun chooseContact() {        val intent = Intent(Intent.ACTION_PICK).apply {            type = ContactsContract.CommonDataKinds.Phone.CONTENT_TYPE        }        startResolvableActivityForResult(intent, RC_CHOOSE_CONTACT)    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        if (grantResults.isEmpty() || grantResults[0] != PERMISSION_GRANTED) return        when (requestCode) {            RC_READ_CONTACT_PERMISSION -> chooseContact()        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if (requestCode == RC_CHOOSE_CONTACT && resultCode == Activity.RESULT_OK) {            onSelectContact(data)        }    }    private fun onSelectContact(data: Intent?) {        val number = PhoneNumberUtils.getNumberFromIntent(data, currentContext)        markersViewModel.editMarker { copy(phoneNumber = number) }    }    private fun showEditPhoneNumberDialog() {        val binding = DialogViewEditMarkerPhoneNumberBinding.inflate(layoutInflater)        binding.etEditMarkerPhoneNumber.setText(markersViewModel.state.markerForEdit?.phoneNumber)        AlertDialog.Builder(currentContext, R.style.AlertDialog)            .setTitle(getString(R.string.title_edit_phone_number))            .setView(binding.root)            .setPositiveButton(getString(R.string.text_ok)) { _, _ ->                val number = binding.etEditMarkerPhoneNumber.text.toString()                markersViewModel.editMarker { copy(phoneNumber = number) }            }            .setNegativeButton(getString(R.string.text_cancel)) { _, _ -> }            .create()            .show()    }    private fun showPhoneNumberActionsDialog() {        markersViewModel.state.markerForEdit?.phoneNumber?.let {            val direction = MarkerPhoneNumberActionsDialogDirections                .actionGlobalMarkerPhoneNumberActionsDialog(it)            findNavController().navigate(direction)        }    }    private val iconDialog: IconDialog        get() = childFragmentManager.findFragmentByTag(IconDialog::class.simpleName) as IconDialog?            ?: IconDialog.newInstance(IconDialogSettings { showSelectBtn = false })    private val colorPicker: ColorPicker        get() {            val colorPicker = ColorPicker(requireActivity())                .disableDefaultButtons(true)                .setColumns(5)                .setDefaultColorButton(markersViewModel.state.markerForEdit?.color ?: 0)                .setTitle("Choose marker color")                .setRoundColorButton(true)                .setColors(R.array.marker_colors)                .setOnFastChooseColorListener(object : ColorPicker.OnFastChooseColorListener {                    override fun setOnFastChooseColorListener(position: Int, color: Int) {                        markersViewModel.editMarker { copy(color = color) }                    }                    override fun onCancel() {}                })            with(colorPicker.dialogViewLayout) {                setBackgroundColor(context.getResColor(R.color.dark_gray))                val titleView =                    findViewById<AppCompatTextView>(petrov.kristiyan.colorpicker.R.id.title)                titleView.setTextColor(currentContext.getResColor(R.color.white))                titleView.textSize = 12f.dp            }            return colorPicker        }    override fun onCancel(dialog: DialogInterface) {        super.onCancel(dialog)        markersViewModel.setMarkerForEdit(null)    }    override val iconDialogIconPack: IconPack?        get() = iconPack    override fun onIconDialogIconsSelected(dialog: IconDialog, icons: List<Icon>) {        val selectedIcon = icons[0]        markersViewModel.editMarker { copy(icon = Marker.Icon(selectedIcon.id)) }    }    companion object {        const val RC_CHOOSE_CONTACT = 1001        const val RC_READ_CONTACT_PERMISSION = 1002    }}