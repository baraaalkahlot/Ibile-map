package com.ibileimport android.Manifest.permission.READ_CONTACTSimport android.app.Activityimport android.app.AlertDialogimport android.app.Dialogimport android.content.Intentimport android.content.pm.PackageManager.PERMISSION_GRANTEDimport android.net.Uriimport android.os.Bundleimport android.provider.ContactsContractimport android.provider.MediaStoreimport android.telephony.PhoneNumberUtilsimport android.text.Editableimport android.view.Viewimport android.widget.ArrayAdapterimport androidx.appcompat.widget.AppCompatTextViewimport androidx.core.view.setPaddingimport androidx.navigation.fragment.findNavControllerimport com.airbnb.epoxy.EpoxyRecyclerViewimport com.airbnb.mvrx.activityViewModelimport com.bumptech.glide.request.RequestOptionsimport com.ibile.core.*import com.ibile.core.Extensions.dpimport com.ibile.data.database.entities.Markerimport com.ibile.databinding.DialogViewEditMarkerPhoneNumberBindingimport com.ibile.utils.EditTextChangeCallbackimport com.ibile.utils.Miscimport com.ibile.utils.extensions.createImageFileimport com.ibile.utils.extensions.getProviderUriimport com.ibile.utils.extensions.runWithPermissionsimport com.ibile.utils.extensions.startResolvableActivityForResultimport com.maltaisn.icondialog.IconDialogimport com.maltaisn.icondialog.IconDialogSettingsimport com.maltaisn.icondialog.data.Iconimport com.maltaisn.icondialog.pack.IconPackimport org.koin.android.ext.android.injectimport petrov.kristiyan.colorpicker.ColorPickerclass EditMarkerDialogFragment : BaseDialogFragment(), IconDialog.Callback {    private val markersViewModel: MarkersViewModel by activityViewModel()    private val iconPack: IconPack by inject()    private var capturedCameraImageUri: Uri? = null    private lateinit var originalMarker: Marker    override val iconDialogIconPack: IconPack?        get() = iconPack    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setStyle(STYLE_NO_TITLE, android.R.style.Theme_Translucent_NoTitleBar)        originalMarker = markersViewModel.getMarkerById(markersViewModel.state.markerForEdit!!.id)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        view.findViewById<EpoxyRecyclerView>(R.id.recyclerview).setPadding(4f.dp.toInt())    }    override fun epoxyController(): MvRxEpoxyController =        simpleController(markersViewModel) { markersViewModelState ->            val marker = markersViewModelState.markerForEdit            if (marker == null) {                findNavController().popBackStack()                return@simpleController            }            // TODO: this should be sticky but there is currently no support for sticky headers in epoxy            editMarkerDetailsHeader {                id("EditMarkerDetailsHeader")                onClickSaveMarker { _ -> markersViewModel.saveMarkerForEdit() }                onClickBackBtn { _ -> markersViewModel.setMarkerForEdit(null) }                saveBtnIsEnabled(marker != originalMarker)            }            editMarkerDetailsBody {                id("EditMarkerDetailsBody")                marker(marker)                titleTextChangeCallback(object :                    EditTextChangeCallback {                    override fun onEditTextChanged(text: Editable) {                        markersViewModel.editMarker { copy(name = text.toString()) }                    }                })                descriptionTextChangeCallback(object :                    EditTextChangeCallback {                    override fun onEditTextChanged(text: Editable) {                        markersViewModel.editMarker { copy(description = text.toString()) }                    }                })                onClickChangeIcon { _ ->                    iconDialog.show(childFragmentManager, IconDialog::class.simpleName)                }                onClickChangeColor { _ -> colorPicker.show() }                onClickChooseContact { _ -> handleChooseContact() }                onClickEditPhoneNumber { _ -> showEditPhoneNumberDialog() }                onClickCallPhoneNumber { _ -> showPhoneNumberActionsDialog() }                onClickAddImages { _ -> handleAddPhotosBtnClick() }                val models = marker.imageUris.mapIndexed { i, uri ->                    val progressDrawable = Misc                        .createCircularProgressDrawable(centerRadius = 15f, strokeWidth = 3f)                    val requestOptions = RequestOptions().centerCrop().placeholder(progressDrawable)                    MarkerImageItemBindingModel_().apply {                        id(i)                        uri(uri)                        dimension(120f)                        requestOptions(requestOptions)                        onClick { _ ->                            val action = MarkerImageItemPreviewFragmentDirections                                .actionGlobalMarkerImageItemPreviewFragment(i)                                .setEditMode(true)                            findNavController().navigate(action)                        }                    }                }                models(models)            }        }    private val iconDialog: IconDialog        get() = childFragmentManager.findFragmentByTag(IconDialog::class.simpleName) as IconDialog?            ?: IconDialog.newInstance(IconDialogSettings { showSelectBtn = false })    private val colorPicker: ColorPicker        get() {            val colorPicker = ColorPicker(requireActivity())                .disableDefaultButtons(true)                .setColumns(5)                .setDefaultColorButton(markersViewModel.state.markerForEdit?.color ?: 0)                .setTitle("Choose marker color")                .setRoundColorButton(true)                .setColors(R.array.marker_colors)                .setOnFastChooseColorListener(object : ColorPicker.OnFastChooseColorListener {                    override fun setOnFastChooseColorListener(position: Int, color: Int) {                        markersViewModel.editMarker { copy(color = color) }                    }                    override fun onCancel() {}                })            with(colorPicker.dialogViewLayout) {                setBackgroundColor(context.getResColor(R.color.dark_gray))                val titleView =                    findViewById<AppCompatTextView>(petrov.kristiyan.colorpicker.R.id.title)                titleView.setTextColor(currentContext.getResColor(R.color.white))                titleView.textSize = 12f.dp            }            return colorPicker        }    private fun handleChooseContact() {        runWithPermissions(::chooseContact, READ_CONTACTS, RC_READ_CONTACT_PERMISSION)    }    private fun chooseContact() {        val intent = Intent(Intent.ACTION_PICK).apply {            type = ContactsContract.CommonDataKinds.Phone.CONTENT_TYPE        }        startResolvableActivityForResult(intent, RC_CHOOSE_CONTACT)    }    private fun showEditPhoneNumberDialog() {        val binding = DialogViewEditMarkerPhoneNumberBinding.inflate(layoutInflater)        binding.etEditMarkerPhoneNumber.setText(markersViewModel.state.markerForEdit?.phoneNumber)        AlertDialog.Builder(currentContext, R.style.AlertDialog)            .setTitle(getString(R.string.title_edit_phone_number))            .setView(binding.root)            .setPositiveButton(getString(R.string.text_ok)) { _, _ ->                val number = binding.etEditMarkerPhoneNumber.text.toString()                markersViewModel.editMarker { copy(phoneNumber = number) }            }            .setNegativeButton(getString(R.string.text_cancel)) { _, _ -> }            .create()            .show()    }    private fun showPhoneNumberActionsDialog() {        markersViewModel.state.markerForEdit?.phoneNumber?.let {            val direction = MarkerPhoneNumberActionsDialogDirections                .actionGlobalMarkerPhoneNumberActionsDialog(it)            findNavController().navigate(direction)        }    }    private fun handleAddPhotosBtnClick() {        val optionItemsAdapter = ArrayAdapter<String>(            currentContext,            R.layout.dialog_edit_marker_add_photos_options_list_item,            R.id.tv_add_photo_option,            listOf("From camera", "From gallery")        )        AlertDialog.Builder(currentContext, R.style.AlertDialog)            .setTitle("Add image")            .setNegativeButton(getString(R.string.text_cancel)) { _, _ -> }            .setAdapter(optionItemsAdapter) { _, i ->                when (i) {                    0 -> captureImageFromCamera()                    1 -> selectPhotosFromSystem()                }            }            .create()            .show()    }    private fun selectPhotosFromSystem() {        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {            type = "image/*"            addCategory(Intent.CATEGORY_OPENABLE)            putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)            putExtra(Intent.EXTRA_LOCAL_ONLY, true)        }        startResolvableActivityForResult(intent, RC_CHOOSE_IMAGES)    }    private fun captureImageFromCamera() {        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)        if (intent.resolveActivity(currentContext.packageManager) == null) return        currentContext.createImageFile()?.let {            capturedCameraImageUri = Uri.fromFile(it)            val uri = currentContext.getProviderUri(it)            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri)            startActivityForResult(intent, RC_TAKE_PHOTO)        }    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        if (grantResults.isEmpty() || grantResults[0] != PERMISSION_GRANTED) return        when (requestCode) {            RC_READ_CONTACT_PERMISSION -> chooseContact()        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        when {            requestCode == RC_CHOOSE_CONTACT && resultCode == Activity.RESULT_OK ->                onSelectContact(data)            requestCode == RC_CHOOSE_IMAGES && resultCode == Activity.RESULT_OK ->                onChooseImages(data)            requestCode == RC_TAKE_PHOTO && resultCode == Activity.RESULT_OK -> {                markersViewModel.editMarker {                    val uris = imageUris.toMutableList().apply { add(capturedCameraImageUri!!) }                    copy(imageUris = uris)                }            }        }    }    private fun onSelectContact(data: Intent?) {        val number = PhoneNumberUtils.getNumberFromIntent(data, currentContext)        markersViewModel.editMarker { copy(phoneNumber = number) }    }    private fun onChooseImages(data: Intent?) {        val uris = mutableListOf<Uri>()        data?.clipData            ?.let { for (i in 0 until it.itemCount) uris.add(it.getItemAt(i).uri) }            ?: data?.data?.let { uris.add(it) }        markersViewModel.onChooseMarkerImages(uris)    }    override fun onIconDialogIconsSelected(dialog: IconDialog, icons: List<Icon>) {        val selectedIcon = icons[0]        markersViewModel.editMarker { copy(icon = Marker.Icon(selectedIcon.id)) }    }    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {        return object : Dialog(requireActivity(), theme) {            override fun onBackPressed() {                markersViewModel.setMarkerForEdit(null)            }        }    }    companion object {        const val RC_CHOOSE_CONTACT = 1001        const val RC_READ_CONTACT_PERMISSION = 1002        const val RC_CHOOSE_IMAGES = 1003        const val RC_TAKE_PHOTO = 1004    }}