package com.ibileimport android.content.DialogInterfaceimport android.os.Bundleimport android.text.Editableimport android.view.Viewimport androidx.appcompat.widget.AppCompatTextViewimport androidx.core.view.setPaddingimport androidx.navigation.fragment.findNavControllerimport com.airbnb.epoxy.EpoxyRecyclerViewimport com.airbnb.mvrx.activityViewModelimport com.ibile.core.*import com.ibile.core.Extensions.dpimport com.ibile.data.database.entities.Markerimport com.ibile.utils.EditTextChangeCallbackimport com.maltaisn.icondialog.IconDialogimport com.maltaisn.icondialog.IconDialogSettingsimport com.maltaisn.icondialog.data.Iconimport com.maltaisn.icondialog.pack.IconPackimport org.koin.android.ext.android.injectimport petrov.kristiyan.colorpicker.ColorPickerclass EditMarkerDialogFragment : BaseDialogFragment(), IconDialog.Callback {    private val markersViewModel: MarkersViewModel by activityViewModel()    private val iconPack: IconPack by inject()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setStyle(STYLE_NO_TITLE, android.R.style.Theme_Translucent_NoTitleBar)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        view.findViewById<EpoxyRecyclerView>(R.id.recyclerview).setPadding(4f.dp.toInt())    }    override fun epoxyController(): MvRxEpoxyController =        simpleController(markersViewModel) { markersViewModelState ->            val marker = markersViewModelState.markerForEdit            if (marker == null) {                findNavController().popBackStack()                return@simpleController            }            // TODO: this should be sticky but there is currently no support for sticky headers in epoxy            editMarkerDetailsHeader {                id("EditMarkerDetailsHeader")                onClickSaveMarker { _ -> markersViewModel.updateStagedMarker() }                onClickBackBtn { _ -> markersViewModel.setMarkerForEdit(null) }                saveBtnIsEnabled(markersViewModel.getMarkerById(marker.id) != marker)            }            editMarkerDetailsBody {                id("EditMarkerDetailsBody")                marker(marker)                titleTextChangeCallback(object :                    EditTextChangeCallback {                    override fun onEditTextChanged(text: Editable) {                        markersViewModel.editMarker { this?.copy(name = text.toString()) }                    }                })                descriptionTextChangeCallback(object :                    EditTextChangeCallback {                    override fun onEditTextChanged(text: Editable) {                        markersViewModel.editMarker { this?.copy(description = text.toString()) }                    }                })                onClickChangeIcon { _ -> showIconDialog() }                onClickChangeColor { _ -> colorPicker.show() }            }        }    private fun showIconDialog() {        iconDialog.show(childFragmentManager, IconDialog::class.simpleName)    }    private val iconDialog: IconDialog        get() = childFragmentManager.findFragmentByTag(IconDialog::class.simpleName) as IconDialog?            ?: IconDialog.newInstance(IconDialogSettings { showSelectBtn = false })    private val colorPicker: ColorPicker        get() {            val colorPicker = ColorPicker(requireActivity())                .disableDefaultButtons(true)                .setColumns(5)                .setDefaultColorButton(markersViewModel.state.markerForEdit?.color ?: 0)                .setTitle("Choose marker color")                .setRoundColorButton(true)                .setColors(R.array.marker_colors)                .setOnFastChooseColorListener(object : ColorPicker.OnFastChooseColorListener {                    override fun setOnFastChooseColorListener(position: Int, color: Int) {                        markersViewModel.editMarker { this?.copy(color = color) }                    }                    override fun onCancel() {}                })            with(colorPicker.dialogViewLayout) {                setBackgroundColor(context.getResColor(R.color.dark_gray))                val titleView =                    findViewById<AppCompatTextView>(petrov.kristiyan.colorpicker.R.id.title)                titleView.setTextColor(currentContext.getResColor(R.color.white))                titleView.textSize = 12f.dp            }            return colorPicker        }    override fun onCancel(dialog: DialogInterface) {        super.onCancel(dialog)        markersViewModel.setMarkerForEdit(null)    }    override val iconDialogIconPack: IconPack?        get() = iconPack    override fun onIconDialogIconsSelected(dialog: IconDialog, icons: List<Icon>) {        val selectedIcon = icons[0]        markersViewModel.editMarker { this?.copy(icon = Marker.Icon(selectedIcon.id)) }    }}